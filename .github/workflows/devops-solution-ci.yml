name: CI

on:
  push:
    branches:
      - develop

permissions:
  contents: write
  pull-requests: write
  issues: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-20.04
    env:
      REPO: ${{ secrets.DOCKERHUB_REPO }}
    steps:
    
      - 
        name: Checkout code
        uses: actions/checkout@v3

      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3      


      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - 
        name: Build and not push Docker image
        id: build_image
        run: |
          docker buildx build \
            --build-arg USER='devops' \
            --build-arg REPO='https://bitbucket.org/devsu/demo-devops-python.git' \
            --build-arg PORT=8000 \
            --load \
            -t $REPO .
      
      - 
        name: Run Unit Tests
        id: run_unit_test
        run: |
          docker run $REPO python3 manage.py test
        continue-on-error: true
        if: always() && ${{ failure() }}
      
      - 
        name: Static Code Analysis
        id: run_stactic_code_analysis
        run: docker run $REPO pylint manage.py
        continue-on-error: true
        if: always() && ${{ failure() }}

      - 
        name: Code Coverage
        id: run_code_coverage
        run: docker run $REPO coverage run --source=manage.py -m pytest && coverage report 
        continue-on-error: true
        if: always() && ${{ failure() }}

      - 
        name: Run Bandit for security analysis
        id: run_security_analysis
        run: docker run $REPO ~/.local/bin/bandit -r .
        continue-on-error: true
        if: always() && ${{ failure() }}

      -
        name: Generate Failure Comment
        id: create_issues
        if: always() && ${{ failure() }}
        uses: actions/github-script@v7
        env:
          github-token: ${{ secrets.PERSONAL_TOKEN }}
        with:
          script: |
            const stepName = context.job.name;
            const body = `:x: **${stepName}** failed. Please check the logs for more details.`;
            if (context.payload.issue) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body,
                title: stepName,
              });
            } else {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body,
                title: stepName,
              });
            }